import numpy as np


def CalcG(ldist,Atual, Visinho):
    
    G = ( (ldist[Atual][0]-ldist[Visinho][0])**2  +  (ldist[Atual][1]-ldist[Visinho][1])**2)**(1/2)     
    return G


grid = []
ldist= []
Varredura =[]
estado = 0
X = 14
Y = 14
for row in range(3):
    grid.append([])
    Varredura.append([])
    for column in range(3):
        grid[row].append(0)  # Append a cell
        ldist.append([X,Y])
        Varredura[row].append(estado)
        estado=estado+1
        X = X+24
    X=14
    Y=Y+24

grid[0][1] = 3
grid[1][2] = 3
grid[2][0] = 3

Partida = 0
Destino = 8
Grafo = []
lts = []
H= []
for n in range(3):
    for m in range(3):
        if (m-1) >=0:
            if grid[n][m-1]!=3:
                lts.append( Varredura[n][m-1]) 
        if (m+1) <=2:
            if grid[n][m+1]!=3:
                lts.append( Varredura[n][m+1]) 
        if (n-1) >=0:
            if grid[n-1][m]!=3:
                lts.append( Varredura[n-1][m])
        if (n+1) <=2:
            if grid[n+1][m]!=3:
                lts.append( Varredura[n+1][m])
        H.append(  ( ( ldist[(n*3)+m][0]-ldist[Destino][0])**2  +  (ldist[(n*3)+m][1]-ldist[Destino][1])**2)**(1/2)  )        
        Grafo.append(lts)
        lts=[]

NoVerificar = []
NoVerificado = []


MAPG = np.full((3*3),9999)
MAPF = np.full((3*3),9999)

MAPG[0] = 0
MAPF[0] = H[0]


NoVerificar.append(Partida)

teste = 'X'

while (len(NoVerificar) > 0 ):
    Verif = 0
    for n in range(len(NoVerificar)):
        if n != Verif:
            if MAPF[n] < MAPF[Verif]:
                Verif = n
    Atual = NoVerificar[Verif]                        
    if (Atual == Destino):
        teste = 'OK'
        break
  
    
    # Aqui remove Atual de Openset   
    NoVerificar.remove(Atual)

   # Coloca Atual em CloseSet
    NoVerificado.append(Atual)  
    VisAtual =   Grafo[Atual]
   
    for n in range(len(VisAtual)):
       if (VisAtual[n] not in NoVerificado):
           MAPG[VisAtual[n]] = MAPG[Atual] + CalcG(ldist,Atual,VisAtual[n])
           MAPF[VisAtual[n]] = MAPG[VisAtual[n]] + H[VisAtual[n]] 
           if (VisAtual[n] not in NoVerificar):
               NoVerificar.append(VisAtual[n])
               
if (teste != "OK"):
    print("Rota NÃ£o encontrada")
      
else:
    print("Rota encontrada")
    Busca = Destino
    Caminho = [Destino]
    while (Busca != Partida):
        VisAtual =   Grafo[Busca]
        for n in range(len(VisAtual)):
            if MAPG[VisAtual[n]] ==  min(MAPG[VisAtual]) :
                Busca = VisAtual[n]
                Caminho.insert(0, Busca)   
    for n in range(len(Caminho)):
        grid[Caminho[n]//3][Caminho[n]%3] = 5
    
    
    print(Caminho)
